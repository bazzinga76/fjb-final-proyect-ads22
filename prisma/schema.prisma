datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

model Post {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String     @default("SIN TITULO")
  content   String?
  published Boolean    @default(false)
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String     @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  reactions Reaction[]
  comments  Comment[]
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     @unique
  name      String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  posts     Post[]
  reactions Reaction[]
  comments  Comment[]
}

model Reaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Students {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  paternal_surname String
  maternal_surname String
  birth_date       DateTime
  admission_date   DateTime
  email            String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  ReportCardDetail ReportCardDetail[]
}

model Teachers {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  paternal_surname String
  maternal_surname String
  birth_date       DateTime
  admission_date   DateTime
  email            String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  ReportCardDetail ReportCardDetail[]
}

model Subjects {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  ReportCardDetail ReportCardDetail[]
}

// model ReportCard {
//   id                String             @id @default(auto()) @map("_id") @db.ObjectId
//   student           Students           @relation(fields: [studentId], references: [id])
//   studentId         String             @db.ObjectId
//   class             String
//   schoolYear        String
//   score             Float
//   period            String
//   description       String
//   createdAt         DateTime           @default(now())
//   updatedAt         DateTime           @default(now())
//   ReportCardDetails ReportCardDetail[]
// }

model ReportCardDetail {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  // reportCard          ReportCard @relation(fields: [reportCardId], references: [id])
  // reportCardId        String     @db.ObjectId
  student             Students? @relation(fields: [studentId], references: [id])
  studentId           String?   @db.ObjectId
  subject             Subjects  @relation(fields: [subjectId], references: [id])
  subjectId           String    @db.ObjectId
  teacher             Teachers  @relation(fields: [teacherId], references: [id])
  teacherId           String    @db.ObjectId
  class               String
  schoolYear          String
  score               Float
  period              String
  description         String
  passed              Boolean
  evaluationStartDate DateTime
  evaluationEndDate   DateTime
  try                 Int
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now())
}
